name: CI - Unix

permissions:
  contents: read

on:
  pull_request:
    paths:
      - '**'
      - '!README'
      - '!INSTALL'
      - '!NEWS'
      - '!doc/**'
      - '!.**'
      - '.github/workflows/CI-unix.yml'
  push:
    branches:
      - v[0-9].*
      - master

jobs:
  build-native:
    runs-on: ubuntu-22.04
    name: build-${{ matrix.toolchain.compiler }}-${{ matrix.target.arch }}${{ matrix.optimization.CFLAGS }}

    strategy:
      fail-fast: false
      matrix:
        target:
          - { arch: x86_64, triple: x86_64-pc-linux-gnu, CFLAGS:      }
        toolchain:
          - { compiler: gcc,   CC: gcc-12,   CXX: g++-12     }
        optimization:
          - { CFLAGS: -O3 }
    steps:
      - uses: actions/checkout@v3

      - name: Setup
        if: ${{ matrix.target.arch }} = 'i686'
        run: |
          sudo apt update
          sudo apt install -y g++-12-multilib

      - name: Configure
        run: |
          set -x
          autoreconf -i
          ./configure --build=x86_64-pc-linux-gnu --host=${{ matrix.target.triple }}
        env:
          CC: ${{ matrix.toolchain.CC }}
          CXX: ${{ matrix.toolchain.CXX }}
          CFLAGS: "${{ matrix.target.CFLAGS }} ${{ matrix.optimization.CFLAGS }} -Wall -Wextra"
          CXXFLAGS: "${{ matrix.target.CFLAGS }} ${{ matrix.optimization.CFLAGS }} -Wall -Wextra"
          LDFLAGS: ${{ matrix.target.CFLAGS }}

      - name: Build
        run: |
          make -j8

      - name: Test (native)
        if: ${{ success() }}
        run: |
          set -x
          sudo bash -c 'echo core.%p.%p > /proc/sys/kernel/core_pattern'
          ulimit -c unlimited
          make check -j8

      - name: Show Logs
        if: ${{ failure() }}
        run: |
          cat tests/test-suite.log 2>/dev/null

  build-cross:
    runs-on: ubuntu-22.04
    name: build-cross-${{ matrix.config.target }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - {target: aarch64,  host: aarch64-linux-gnu,       qemu: aarch64,  gccver: 12 }

    steps:
      - uses: actions/checkout@v3
      - name: Install QEMU
        # this ensure install latest qemu on ubuntu, apt get version is old
        env:
          QEMU_SRC: "http://archive.ubuntu.com/ubuntu/pool/universe/q/qemu"
          QEMU_VER: "qemu-user-static_7\\.2.*_amd64.deb$"
        run: |
          DEB=`curl -s $QEMU_SRC/ | grep -o -E 'href="([^"#]+)"' | cut -d'"' -f2 | grep $QEMU_VER | tail -1`
          wget $QEMU_SRC/$DEB
          sudo dpkg -i $DEB

      - name: Install ${{ matrix.config.host }} Toolchain
        run: |
          sudo apt update
          sudo apt install g++-${{ matrix.config.gccver }}-${{ matrix.config.host }} -y

      - name: Configure with ${{ matrix.config.cc }}
        run: |
          set -x
          autoreconf -i
          BUILD=x86_64-linux-gnu
          ./configure --build=$BUILD --host=${{ matrix.config.host }} --with-testdriver=$(pwd)/scripts/qemu-test-driver --enable-debug
        env:
          CC: ${{ matrix.config.host }}-gcc-${{ matrix.config.gccver }}
          CXX: ${{ matrix.config.host }}-g++-${{ matrix.config.gccver }}

      - name: Build
        run: |
          make -j8 V=1 CFLAGS="-save-temps -fverbose-asm -O2 -fno-stack-protector"

      - name: Test
        run: |
          set -x
          sudo bash -c 'echo core.%p.%p > /proc/sys/kernel/core_pattern'
          ulimit -c unlimited
          CROSS_LIB="/usr/${{ matrix.config.host }}"
          make check LOG_DRIVER_FLAGS="--qemu-arch ${{ matrix.config.qemu }}" LDFLAGS="-L$CROSS_LIB/lib -static" QEMU_LD_PREFIX="$CROSS_LIB"
        env:
          UNW_DEBUG_LEVEL: 16

      - name: Show Logs
        if: ${{ failure() }}
        run: |
          find . -name Gresume.s | xargs cat
          cat tests/test-suite.log 2>/dev/null
